{"remainingRequest":"/home/runner/work/CF12_228142/CF12_228142/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF12_228142/CF12_228142/src/views/Tema3.vue?vue&type=template&id=571e3fe9&lang=pug","dependencies":[{"path":"/home/runner/work/CF12_228142/CF12_228142/src/views/Tema3.vue","mtime":1733799621783},{"path":"/home/runner/work/CF12_228142/CF12_228142/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF12_228142/CF12_228142/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF12_228142/CF12_228142/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF12_228142/CF12_228142/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/CF12_228142/CF12_228142/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/CF12_228142/CF12_228142/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF12_228142/CF12_228142/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubwogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucC00LnAtbWQtNS5tYi01CiAgICAudGl0dWxvLXByaW5jaXBhbC5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIC50aXR1bG8tcHJpbmNpcGFsX19udW1lcm8KICAgICAgICBzcGFuIDMKICAgICAgaDEgUHJvdG9jb2xvcyBkZSBlbnRyZWdhCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyLmJnMQogICAgICAuY29sLnB0LWxnLTAucHQtbWQtNC5wLTQKICAgICAgICBwLm1iLTAgTG9zIHByb3RvY29sb3MgZGUgZW50cmVnYSBzb24gcHJvY2VkaW1pZW50b3MgZXN0cnVjdHVyYWRvcyBxdWUgYXNlZ3VyYW4gcXVlIGxvcyBlcXVpcG9zIGRlIGPDs21wdXRvIHNlIGVudHJlZ3VlbiBkZSBtYW5lcmEgZWZpY2llbnRlIHkgZWZlY3RpdmEgYWwgdXN1YXJpbyBmaW5hbC4gRXN0b3MgcHJvdG9jb2xvcyBnYXJhbnRpemFuIHF1ZSBlbCBlcXVpcG8gY3VtcGxhIGNvbiBsb3MgcmVxdWlzaXRvcyBlc3BlY2lmaWNhZG9zLCBxdWUgdG9kYSBsYSBkb2N1bWVudGFjacOzbiBuZWNlc2FyaWEgZXN0w6kgY29tcGxldGEgeSBxdWUgZWwgdXN1YXJpbyBlc3TDqSBjYXBhY2l0YWRvIHBhcmEgdXRpbGl6YXIgZWwgZXF1aXBvIGRlIG1hbmVyYSBhZGVjdWFkYQogICAgICAuY29sLWxnLWF1dG8ucHQtbGctMC5wdC1tZC00CiAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvdDMvMS5wbmcnIGFsdD0nJykKICAgIFNlcGFyYWRvciAgCiAgICAjdF8zXzEudGl0dWxvLXNlZ3VuZG8uY29sb3ItYWNlbnRvLWNvbnRlbmlkbwogICAgICBoMiAzLjEJVmVyaWZpY2FjacOzbiBkZSByZXF1ZXJpbWllbnRvcwogICAgcCBMYSB2ZXJpZmljYWNpw7NuIGRlIHJlcXVlcmltaWVudG9zIGVzIHVuIHBhc28gcGFyYSBhc2VndXJhciBxdWUgZWwgZXF1aXBvIGRlIGPDs21wdXRvIGN1bXBsYSBjb24gbGFzIGVzcGVjaWZpY2FjaW9uZXMgeSBuZWNlc2lkYWRlcyBkZWwgdXN1YXJpbyBmaW5hbC4gRXN0ZSBwcm9jZXNvIGltcGxpY2EgcmV2aXNhciB5IGNvbmZpcm1hciBxdWUgdG9kb3MgbG9zIGNvbXBvbmVudGVzIHkgZnVuY2lvbmFsaWRhZGVzIGRlbCBlcXVpcG8gc2VhbiBhZGVjdWFkb3MgeSBlc3TDqW4gZW4gYnVlbiBlc3RhZG8uIAoKICAgIFRhYnNDLmNvbG9yLWFjZW50by1jb250ZW5pZG8ubWItNQogICAgICAucC00LnB5LTk5LnB5LW1kLTUodGl0dWxvPSJSZXZpc2nDs24gZGUgZXNwZWNpZmljYWNpb25lcyIpCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmJnMy5wLTQuYnJhZAogICAgICAgICAgLmNvbC1sZy01CiAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzL3QzLzIucG5nJyBhbHQ9JycpCiAgICAgICAgICAuY29sLWxnLTcubWItNC5tYi1tZC0wLnAtNAogICAgICAgICAgICBoNC5tYi00IFJldmlzacOzbiBkZSBlc3BlY2lmaWNhY2lvbmVzCiAgICAgICAgICAgIHAubWItMyBMYSByZXZpc2nDs24gZGUgZXNwZWNpZmljYWNpb25lcyBpbXBsaWNhIHZlcmlmaWNhciBxdWUgZWwgZXF1aXBvIGN1bXBsYSBjb24gbGFzIGVzcGVjaWZpY2FjaW9uZXMgdMOpY25pY2FzIHJlcXVlcmlkYXMgcG9yIGVsIHVzdWFyaW8uIAogICAgICAgICAgICB1bC5saXN0YS11bC5mYS11bC5wcy00CiAgICAgICAgICAgICAgbGkgCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUuY29sb3IxCiAgICAgICAgICAgICAgICBzcGFuICNbaSBIYXJkd2FyZV06IFZlcmlmaWNhY2nDs24gZGUgcXVlIGVsIGhhcmR3YXJlIGRlbCBlcXVpcG8sIGNvbW8gbGEgQ1BVLCBsYSBtZW1vcmlhIFJBTSwgZWwgZGlzY28gZHVybyB5IGxhIHRhcmpldGEgZ3LDoWZpY2EsIGN1bXBsYSBjb24gbGFzIGVzcGVjaWZpY2FjaW9uZXMgdMOpY25pY2FzIHJlcXVlcmlkYXMuCiAgICAgICAgICAgICAgbGkgCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUuY29sb3IxCiAgICAgICAgICAgICAgICBzcGFuICNbaSBTb2Z0d2FyZV06IFZlcmlmaWNhY2nDs24gZGUgcXVlIGVsIHNvZnR3YXJlIGluc3RhbGFkbywgaW5jbHV5ZW5kbyBlbCBzaXN0ZW1hIG9wZXJhdGl2byB5IGxhcyBhcGxpY2FjaW9uZXMsIGN1bXBsYSBjb24gbGFzIGVzcGVjaWZpY2FjaW9uZXMgeSByZXF1aXNpdG9zIGRlbCB1c3VhcmlvLgogICAgICAgICAgICAgIGxpIAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlLmNvbG9yMQogICAgICAgICAgICAgICAgc3BhbiBQZXJpZsOpcmljb3M6IFZlcmlmaWNhY2nDs24gZGUgcXVlIHRvZG9zIGxvcyBwZXJpZsOpcmljb3MsIGNvbW8gaW1wcmVzb3JhcywgZXNjw6FuZXJlcyB5IG90cm9zIGRpc3Bvc2l0aXZvcyBleHRlcm5vcywgZXN0w6luIGluY2x1aWRvcyB5IGZ1bmNpb25lbiBjb3JyZWN0YW1lbnRlLgoKICAgICAgLnAtNC5weS05OS5weS1tZC01KHRpdHVsbz0iUHJ1ZWJhcyBkZSBmdW5jaW9uYWxpZGFkIikKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYmczLnAtNC5icmFkCiAgICAgICAgICAuY29sLWxnLTUKICAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzL3QzLzMucG5nJyBhbHQ9JycpCiAgICAgICAgICAuY29sLWxnLTcubWItNC5tYi1tZC0wLnAtNAogICAgICAgICAgICBoNC5tYi00IFBydWViYXMgZGUgZnVuY2lvbmFsaWRhZAogICAgICAgICAgICBwIExhcyBwcnVlYmFzIGRlIGZ1bmNpb25hbGlkYWQgYXNlZ3VyYW4gcXVlIGVsIGVxdWlwbyBwdWVkYSByZWFsaXphciB0b2RhcyBsYXMgdGFyZWFzIG5lY2VzYXJpYXMgZGUgbWFuZXJhIGVmZWN0aXZhLgogICAgICAgICAgICB1bC5saXN0YS11bC5mYS11bC5wcy00CiAgICAgICAgICAgICAgbGkgCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUuY29sb3IxCiAgICAgICAgICAgICAgICBzcGFuIFBydWViYXMgZGUgcmVuZGltaWVudG86IEV2YWx1YWNpw7NuIGRlbCByZW5kaW1pZW50byBkZWwgZXF1aXBvIGJham8gZGlmZXJlbnRlcyBjb25kaWNpb25lcyBkZSB1c28gcGFyYSBhc2VndXJhciBxdWUgY3VtcGxhIGNvbiBsYXMgZXhwZWN0YXRpdmFzIGRlbCB1c3VhcmlvLgogICAgICAgICAgICAgIGxpIAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlLmNvbG9yMQogICAgICAgICAgICAgICAgc3BhbiBQcnVlYmFzIGRlIGNvbXBhdGliaWxpZGFkOiBWZXJpZmljYWNpw7NuIGRlIHF1ZSBlbCBlcXVpcG8gc2VhIGNvbXBhdGlibGUgY29uIG90cm9zIHNpc3RlbWFzIHkgZGlzcG9zaXRpdm9zIHF1ZSBlbCB1c3VhcmlvIG5lY2VzaXRhcsOhIHV0aWxpemFyLgogICAgICAgICAgICAgIGxpCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUuY29sb3IxCiAgICAgICAgICAgICAgICBzcGFuIFBydWViYXMgZGUgdXNhYmlsaWRhZDogRXZhbHVhY2nDs24gZGUgbGEgZmFjaWxpZGFkIGRlIHVzbyBkZWwgZXF1aXBvIHkgbGEgaW50ZXJmYXogZGUgdXN1YXJpbyBwYXJhIGFzZWd1cmFyIHF1ZSBlbCB1c3VhcmlvIHB1ZWRhIHV0aWxpemFyIGVsIGVxdWlwbyBkZSBtYW5lcmEgZWZlY3RpdmEuCiAgICAgICAgICAgICAgCgogICAgICAucC00LnB5LTk5LnB5LW1kLTUodGl0dWxvPSJSZXZpc2nDs24gZGUgZG9jdW1lbnRhY2nDs24gIikKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYmczLnAtNC5icmFkCiAgICAgICAgICAuY29sLWxnLTUKICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvdDMvNC5wbmcnIGFsdD0nJykKICAgICAgICAgIC5jb2wtbGctNy5tYi00Lm1iLW1kLTAucC00CiAgICAgICAgICAgIGg0Lm1iLTQgUmV2aXNpw7NuIGRlIGRvY3VtZW50YWNpw7NuCiAgICAgICAgICAgIHAubWItMyBMYSByZXZpc2nDs24gZGUgZG9jdW1lbnRhY2nDs24gaW1wbGljYSB2ZXJpZmljYXIgcXVlIHRvZGEgbGEgZG9jdW1lbnRhY2nDs24gbmVjZXNhcmlhIGVzdMOpIGNvbXBsZXRhIHkgY29ycmVjdGEuCiAgICAgICAgICAgIHVsLmxpc3RhLXVsLmZhLXVsLnBzLTQKICAgICAgICAgICAgICBsaSAKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZS5jb2xvcjEKICAgICAgICAgICAgICAgIHNwYW4gTWFudWFsZXMgZGUgdXN1YXJpbzogVmVyaWZpY2FjacOzbiBkZSBxdWUgbG9zIG1hbnVhbGVzIGRlIHVzdWFyaW8gZXN0w6luIGNvbXBsZXRvcyB5IHNlYW4gYWRlY3VhZG9zIHBhcmEgZWwgZXF1aXBvIHkgZWwgc29mdHdhcmUgaW5zdGFsYWRvLgogICAgICAgICAgICAgIGxpIAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlLmNvbG9yMQogICAgICAgICAgICAgICAgc3BhbiBHYXJhbnTDrWFzOiBWZXJpZmljYWNpw7NuIGRlIHF1ZSB0b2RhIGxhIGRvY3VtZW50YWNpw7NuIHJlbGFjaW9uYWRhIGNvbiBsYSBnYXJhbnTDrWEgZGVsIGVxdWlwbyBlc3TDqSBjb21wbGV0YSB5IGNvcnJlY3RhLgogICAgICAgICAgICAgIGxpIAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlLmNvbG9yMQogICAgICAgICAgICAgICAgc3BhbiBMaWNlbmNpYXMgZGUgc29mdHdhcmU6IFZlcmlmaWNhY2nDs24gZGUgcXVlIHRvZGFzIGxhcyBsaWNlbmNpYXMgZGUgc29mdHdhcmUgZXN0w6luIGluY2x1aWRhcyB5IHNlYW4gdsOhbGlkYXMuCiAgICAgICAgICAgIAogICAgU2VwYXJhZG9yICAKICAgICN0XzNfMi50aXR1bG8tc2VndW5kby5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIGgyIDMuMglEb2N1bWVudGFjacOzbiBkZSBlbnRyZWdhCiAgICBwLm1iLTMgTGEgZG9jdW1lbnRhY2nDs24gZGUgZW50cmVnYSBlcyB1biBjb21wb25lbnRlIHByb3BpbyBkZSBsb3MgcHJvdG9jb2xvcyBkZSBlbnRyZWdhLCB5YSBxdWUgcHJvcG9yY2lvbmEgYWwgdXN1YXJpbyB0b2RhIGxhIGluZm9ybWFjacOzbiBuZWNlc2FyaWEgcGFyYSB1dGlsaXphciB5IG1hbnRlbmVyIGVsIGVxdWlwbyBkZSBtYW5lcmEgZWZlY3RpdmEuIEEgY29udGludWFjacOzbiwgc2UgZGVzY3JpYmVuIGxvcyBhc3BlY3RvcyBxdWUgc2UgZGViZW4gdGVuZXIgZW4gY3VlbnRhIHBhcmEgbGEgZG9jdW1lbnRhY2nDs24gZGUgZW50cmVnYToKCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNAogICAgIC5jb2wtbGctMy5teS1sZy0wLm15LTMKICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy90My81LnBuZycgYWx0PScnKSAgICAgICAgIAogICAgIC5jb2wtbGctOS5teS1sZy0wLm15LTMKICAgICAgICBBY29yZGlvbkEodGlwbz0iYSIgY2xhc2UtdGFyamV0YT0idGFyamV0YSBiZzMiKQogICAgICAgICAgZGl2KHRpdHVsbz0iTWFudWFsZXMgZGUgdXN1YXJpbyIpCiAgICAgICAgICAgIHAgTG9zIG1hbnVhbGVzIGRlIHVzdWFyaW8gc29uIGRvY3VtZW50b3MgZGV0YWxsYWRvcyBxdWUgcHJvcG9yY2lvbmFuIGluc3RydWNjaW9uZXMgc29icmUgY8OzbW8gdXRpbGl6YXIgZWwgZXF1aXBvIHkgZWwgc29mdHdhcmUgaW5zdGFsYWRvLgogICAgICAgICAgICB1bC5saXN0YS11bC5mYS11bC5wcy00CiAgICAgICAgICAgICAgbGkgCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUuY29sb3IxCiAgICAgICAgICAgICAgICBzcGFuIEluc3RydWNjaW9uZXMgZGUgdXNvOiBQcm92aXNpw7NuIGRlIGluc3RydWNjaW9uZXMgZGV0YWxsYWRhcyBzb2JyZSBjw7NtbyB1dGlsaXphciBlbCBlcXVpcG8geSBlbCBzb2Z0d2FyZSBpbnN0YWxhZG8uCiAgICAgICAgICAgICAgbGkgCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUuY29sb3IxCiAgICAgICAgICAgICAgICBzcGFuIEd1w61hcyBkZSBpbnN0YWxhY2nDs246IEluc3RydWNjaW9uZXMgZGV0YWxsYWRhcyBwYXJhIGxhIGluc3RhbGFjacOzbiB5IGNvbmZpZ3VyYWNpw7NuIGRlbCBlcXVpcG8geSBlbCBzb2Z0d2FyZS4KICAgICAgICAgICAgICBsaSAKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZS5jb2xvcjEKICAgICAgICAgICAgICAgIHNwYW4gU29sdWNpw7NuIGRlIHByb2JsZW1hczogUHJvdmlzacOzbiBkZSBndcOtYXMgZGUgc29sdWNpw7NuIGRlIHByb2JsZW1hcyBwYXJhIGF5dWRhciBhbCB1c3VhcmlvIGEgcmVzb2x2ZXIgcHJvYmxlbWFzIGNvbXVuZXMgcXVlIHB1ZWRhbiBzdXJnaXIuCiAgICAgICAgICAgICAgbGkgCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUuY29sb3IxCiAgICAgICAgICAgICAgICBzcGFuIEd1w61hcyBkZSBpbnN0YWxhY2nDs24KICAgICAgICAgICAgICBsaSAKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZS5jb2xvcjEKICAgICAgICAgICAgICAgIHNwYW4gTGFzIGd1w61hcyBkZSBpbnN0YWxhY2nDs24gcHJvcG9yY2lvbmFuIGluc3RydWNjaW9uZXMgZGV0YWxsYWRhcyBwYXJhIGxhIGluc3RhbGFjacOzbiB5IGNvbmZpZ3VyYWNpw7NuIGRlbCBlcXVpcG8geSBlbCBzb2Z0d2FyZS4gCiAgICAgICAgICAgICAgbGkgCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUuY29sb3IxCiAgICAgICAgICAgICAgICBzcGFuIEluc3RhbGFjacOzbiBkZSBoYXJkd2FyZTogSW5zdHJ1Y2Npb25lcyBkZXRhbGxhZGFzIHBhcmEgbGEgaW5zdGFsYWNpw7NuIHkgY29uZmlndXJhY2nDs24gZGVsIGhhcmR3YXJlIGRlbCBlcXVpcG8uCiAgICAgICAgICAgICAgbGkgCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUuY29sb3IxCiAgICAgICAgICAgICAgICBzcGFuIEluc3RhbGFjacOzbiBkZSBzb2Z0d2FyZTogSW5zdHJ1Y2Npb25lcyBkZXRhbGxhZGFzIHBhcmEgbGEgaW5zdGFsYWNpw7NuIHkgY29uZmlndXJhY2nDs24gZGVsIHNvZnR3YXJlLCBpbmNsdXllbmRvIGVsIHNpc3RlbWEgb3BlcmF0aXZvIHkgbGFzIGFwbGljYWNpb25lcy4KICAgICAgICAgICAgICBsaSAKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZS5jb2xvcjEKICAgICAgICAgICAgICAgIHNwYW4gQ29uZmlndXJhY2nDs24gZGUgcmVkOiBJbnN0cnVjY2lvbmVzIGRldGFsbGFkYXMgcGFyYSBsYSBjb25maWd1cmFjacOzbiBkZSBsYXMgY29uZXhpb25lcyBkZSByZWQsIGluY2x1eWVuZG8gbGEgY29uZmlndXJhY2nDs24gZGUgV2ktRmksIFZQTiB5IG90cm9zIGFqdXN0ZXMgZGUgcmVkLgogICAgICAgICAgZGl2KHRpdHVsbz0iRG9jdW1lbnRhY2nDs24gZGUgZ2FyYW50w61hIikgCiAgICAgICAgICAgcCBMYSBkb2N1bWVudGFjacOzbiBkZSBnYXJhbnTDrWEgcHJvcG9yY2lvbmEgYWwgdXN1YXJpbyB0b2RhIGxhIGluZm9ybWFjacOzbiBuZWNlc2FyaWEgc29icmUgbGEgZ2FyYW50w61hIGRlbCBlcXVpcG8KICAgICAgICAgICAgdWwubGlzdGEtdWwuZmEtdWwucHMtNAogICAgICAgICAgICAgIGxpIAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlLmNvbG9yMQogICAgICAgICAgICAgICAgc3BhbiBDb2JlcnR1cmEgZGUgZ2FyYW50w61hOiBFeHBsaWNhY2nDs24gZGUgbG9zIHTDqXJtaW5vcyB5IGNvbmRpY2lvbmVzIGRlIGxhIGdhcmFudMOtYSwgaW5jbHV5ZW5kbyBxdcOpIGVzdMOhIGN1YmllcnRvIHkgcXXDqSBubyBlc3TDoSBjdWJpZXJ0by4KICAgICAgICAgICAgICBsaQogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlLmNvbG9yMQogICAgICAgICAgICAgICAgc3BhbiBQcm9jZWRpbWllbnRvcyBkZSByZWNsYW1hY2nDs246IEluc3RydWNjaW9uZXMgc29icmUgY8OzbW8gaGFjZXIgdW5hIHJlY2xhbWFjacOzbiBiYWpvIGxhIGdhcmFudMOtYSwgaW5jbHV5ZW5kbyBsb3MgcGFzb3MgYSBzZWd1aXIgeSBsYSBpbmZvcm1hY2nDs24gbmVjZXNhcmlhLgogICAgICAgICAgICAgIGxpCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUuY29sb3IxCiAgICAgICAgICAgICAgICBzcGFuIEV4dGVuc2nDs24gZGUgZ2FyYW50w61hOiBPcGNpb25lcyBwYXJhIGV4dGVuZGVyIGxhIGdhcmFudMOtYSBtw6FzIGFsbMOhIGRlbCBwZXLDrW9kbyBpbmljaWFsLCBpbmNsdXllbmRvIGxvcyBjb3N0b3MgeSBsb3MgYmVuZWZpY2lvcyBhZGljaW9uYWxlcy4KICAgICAgICAgIGRpdih0aXR1bG89IkRvY3VtZW50YWNpw7NuIGRlIGxpY2VuY2lhcyIpIAogICAgICAgICAgIHAgTGEgZG9jdW1lbnRhY2nDs24gZGUgbGljZW5jaWFzIHByb3BvcmNpb25hIGFsIHVzdWFyaW8gdG9kYSBsYSBpbmZvcm1hY2nDs24gbmVjZXNhcmlhIHNvYnJlIGxhcyBsaWNlbmNpYXMgZGUgc29mdHdhcmUgaW5zdGFsYWRhcyBlbiBlbCBlcXVpcG8sIHNlIHJlY29taWVuZGEgY29ub2NlciwgCiAgICAgICAgICAgIHVsLmxpc3RhLXVsLmZhLXVsLnBzLTQKICAgICAgICAgICAgICBsaSAKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZS5jb2xvcjEKICAgICAgICAgICAgICAgIHNwYW4gVMOpcm1pbm9zIGRlIGxpY2VuY2lhOiBFeHBsaWNhY2nDs24gZGUgbG9zIHTDqXJtaW5vcyB5IGNvbmRpY2lvbmVzIGRlIGxhcyBsaWNlbmNpYXMgZGUgc29mdHdhcmUsIGluY2x1eWVuZG8gbG9zIGRlcmVjaG9zIHkgb2JsaWdhY2lvbmVzIGRlbCB1c3VhcmlvLgogICAgICAgICAgICAgIGxpCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUuY29sb3IxCiAgICAgICAgICAgICAgICBzcGFuIEFjdGl2YWNpw7NuIGRlIGxpY2VuY2lhczogSW5zdHJ1Y2Npb25lcyBzb2JyZSBjw7NtbyBhY3RpdmFyIGxhcyBsaWNlbmNpYXMgZGUgc29mdHdhcmUsIGluY2x1eWVuZG8gbG9zIGPDs2RpZ29zIGRlIGFjdGl2YWNpw7NuIHkgbG9zIHBhc29zIGEgc2VndWlyLgogICAgICAgICAgICAgIGxpCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUuY29sb3IxCiAgICAgICAgICAgICAgICBzcGFuIFJlbm92YWNpw7NuIGRlIGxpY2VuY2lhczogT3BjaW9uZXMgcGFyYSByZW5vdmFyIGxhcyBsaWNlbmNpYXMgZGUgc29mdHdhcmUsIGluY2x1eWVuZG8gbG9zIGNvc3RvcyB5IGxvcyBiZW5lZmljaW9zIGFkaWNpb25hbGVzLgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTQgICAKICAgICAgLmNvbC1sZy05Lm15LWxnLTAubXktMwogICAgICAgIEFjb3JkaW9uQSh0aXBvPSJhIiBjbGFzZS10YXJqZXRhPSJ0YXJqZXRhIGJnMyIpCiAgICAgICAgICBkaXYodGl0dWxvPSJDYXBhY2l0YWNpw7NuIGLDoXNpY2EgIikKICAgICAgICAgICAgcCBMYSBjYXBhY2l0YWNpw7NuIGLDoXNpY2EgZXMgdW4gY29tcG9uZW50ZSBpbmZhbGlibGUgZGUgbG9zIHByb3RvY29sb3MgZGUgZW50cmVnYSwgeWEgcXVlIGFzZWd1cmEgcXVlIGVsIHVzdWFyaW8gcHVlZGEgdXRpbGl6YXIgZWwgZXF1aXBvIGRlIG1hbmVyYSBlZmVjdGl2YS4gCiAgICAgICAgICAgIHVsLmxpc3RhLXVsLmZhLXVsLnBzLTQKICAgICAgICAgICAgICBsaSAKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZS5jb2xvcjEKICAgICAgICAgICAgICAgIHNwYW4gSW5zdHJ1Y2Npw7NuIHNvYnJlIGVsIHVzbyBkZWwgZXF1aXBvCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICBsaSAKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZS5jb2xvcjEKICAgICAgICAgICAgICAgIHNwYW4gTGEgaW5zdHJ1Y2Npw7NuIHNvYnJlIGVsIHVzbyBkZWwgZXF1aXBvIHByb3BvcmNpb25hIGFsIHVzdWFyaW8gbGFzIGhhYmlsaWRhZGVzIHkgY29ub2NpbWllbnRvcyBuZWNlc2FyaW9zIHBhcmEgdXRpbGl6YXIgZWwgZXF1aXBvIGRlIG1hbmVyYSBlZmVjdGl2YS4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgIGxpIAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlLmNvbG9yMQogICAgICAgICAgICAgICAgc3BhbiBGdW5jaW9uZXMgYsOhc2ljYXM6IEV4cGxpY2FjacOzbiBkZSBsYXMgZnVuY2lvbmVzIGLDoXNpY2FzIGRlbCBlcXVpcG8geSBlbCBzb2Z0d2FyZSBpbnN0YWxhZG8sIGluY2x1eWVuZG8gY8OzbW8gZW5jZW5kZXIgeSBhcGFnYXIgZWwgZXF1aXBvLCBjw7NtbyBpbmljaWFyIHNlc2nDs24geSBjw7NtbyB1dGlsaXphciBsYXMgYXBsaWNhY2lvbmVzIGLDoXNpY2FzLgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgbGkgCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUuY29sb3IxCiAgICAgICAgICAgICAgICBzcGFuIEZ1bmNpb25lcyBhdmFuemFkYXM6IEV4cGxpY2FjacOzbiBkZSBsYXMgZnVuY2lvbmVzIGF2YW56YWRhcyBkZWwgZXF1aXBvIHkgZWwgc29mdHdhcmUgaW5zdGFsYWRvLCBpbmNsdXllbmRvIGPDs21vIHV0aWxpemFyIGxhcyBoZXJyYW1pZW50YXMgZGUgcHJvZHVjdGl2aWRhZCwgbGFzIGFwbGljYWNpb25lcyBkZSBkaXNlw7FvIGdyw6FmaWNvIHkgb3RyYXMgZnVuY2lvbmFsaWRhZGVzIGF2YW56YWRhcy4KICAgICAgICAgICAgICBsaSAKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZS5jb2xvcjEKICAgICAgICAgICAgICAgIHNwYW4gUGVyc29uYWxpemFjacOzbiBkZWwgZXF1aXBvOiBJbnN0cnVjY2nDs24gc29icmUgY8OzbW8gcGVyc29uYWxpemFyIGVsIGVxdWlwbyB5IGVsIHNvZnR3YXJlIGluc3RhbGFkbywgaW5jbHV5ZW5kbyBsYSBjb25maWd1cmFjacOzbiBkZSBwZXJmaWxlcyBkZSB1c3VhcmlvLCBsYSBwZXJzb25hbGl6YWNpw7NuIGRlIGxhIGludGVyZmF6IGRlIHVzdWFyaW8geSBsYSBjb25maWd1cmFjacOzbiBkZSBhcGxpY2FjaW9uZXMgcGVyc29uYWxpemFkYXMuCiAgICAgICAgICBkaXYodGl0dWxvPSJFeHBsaWNhY2nDs24gZGUgZnVuY2lvbmVzIGNsYXZlICIpCiAgICAgICAgICAgIHAgTGEgZXhwbGljYWNpw7NuIGRlIGZ1bmNpb25lcyBjbGF2ZSBwcm9wb3JjaW9uYSBhbCB1c3VhcmlvIHVuYSBjb21wcmVuc2nDs24gZGV0YWxsYWRhIGRlIGxhcyBjYXJhY3RlcsOtc3RpY2FzIHkgZnVuY2lvbmFsaWRhZGVzIG3DoXMgaW1wb3J0YW50ZXMgZGVsIGVxdWlwbyB5IGVsIHNvZnR3YXJlIGluc3RhbGFkby4uCiAgICAgICAgICAgIHVsLmxpc3RhLXVsLmZhLXVsLnBzLTQKICAgICAgICAgICAgICBsaSAKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZS5jb2xvcjEKICAgICAgICAgICAgICAgIHNwYW4gRnVuY2lvbmVzIGRlIHNlZ3VyaWRhZDogRXhwbGljYWNpw7NuIGRlIGxhcyBmdW5jaW9uZXMgZGUgc2VndXJpZGFkIGRlbCBlcXVpcG8geSBlbCBzb2Z0d2FyZSBpbnN0YWxhZG8sIGluY2x1eWVuZG8gY8OzbW8gY29uZmlndXJhciB5IHV0aWxpemFyIGxhcyBoZXJyYW1pZW50YXMgZGUgc2VndXJpZGFkLCBjb21vIGxvcyBhbnRpdmlydXMsIGxvcyBmaXJld2FsbHMgeSBsYXMgcG9sw610aWNhcyBkZSBzZWd1cmlkYWQuCiAgICAgICAgICAgICAgbGkgCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUuY29sb3IxCiAgICAgICAgICAgICAgICBzcGFuIEZ1bmNpb25lcyBkZSBwcm9kdWN0aXZpZGFkOiBFeHBsaWNhY2nDs24gZGUgbGFzIGZ1bmNpb25lcyBkZSBwcm9kdWN0aXZpZGFkIGRlbCBlcXVpcG8geSBlbCBzb2Z0d2FyZSBpbnN0YWxhZG8sIGluY2x1eWVuZG8gY8OzbW8gdXRpbGl6YXIgbGFzIGhlcnJhbWllbnRhcyBkZSBnZXN0acOzbiBkZSBwcm95ZWN0b3MsIGxhcyBzdWl0ZXMgZGUgb2ZpY2luYSB5IG90cmFzIGFwbGljYWNpb25lcyBkZSBwcm9kdWN0aXZpZGFkLgogICAgICAgICAgICAgIGxpIAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlLmNvbG9yMQogICAgICAgICAgICAgICAgc3BhbiBGdW5jaW9uZXMgZGUgY29uZWN0aXZpZGFkOiBFeHBsaWNhY2nDs24gZGUgbGFzIGZ1bmNpb25lcyBkZSBjb25lY3RpdmlkYWQgZGVsIGVxdWlwbyB5IGVsIHNvZnR3YXJlIGluc3RhbGFkbywgaW5jbHV5ZW5kbyBjw7NtbyBjb25maWd1cmFyIHkgdXRpbGl6YXIgbGFzIGNvbmV4aW9uZXMgZGUgcmVkLCBsYXMgVlBOIHkgb3Ryb3MgYWp1c3RlcyBkZSByZWQuCiAgICAgICAgICBkaXYodGl0dWxvPSJSZXNvbHVjacOzbiBkZSBwcm9ibGVtYXMgYsOhc2ljb3MiKQogICAgICAgICAgICBwIExhIGluc3RydWNjacOzbiBzb2JyZSBsYSByZXNvbHVjacOzbiBkZSBwcm9ibGVtYXMgYsOhc2ljb3MgcHJvcG9yY2lvbmEgYWwgdXN1YXJpbyBsYXMgaGFiaWxpZGFkZXMgeSBjb25vY2ltaWVudG9zIG5lY2VzYXJpb3MgcGFyYSByZXNvbHZlciBwcm9ibGVtYXMgY29tdW5lcyBxdWUgcHVlZGFuIHN1cmdpci4KICAgICAgICAgICAgdWwubGlzdGEtdWwuZmEtdWwucHMtNAogICAgICAgICAgICAgIGxpIAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlLmNvbG9yMQogICAgICAgICAgICAgICAgc3BhbiBQcm9ibGVtYXMgZGUgI1tpIGhhcmR3YXJlXTogSW5zdHJ1Y2Npw7NuIHNvYnJlIGPDs21vIHJlc29sdmVyIHByb2JsZW1hcyBjb211bmVzIGRlICNbaSBoYXJkd2FyZV0sIGluY2x1eWVuZG8gY8OzbW8gcmVlbXBsYXphciBjb21wb25lbnRlcyBkZWZlY3R1b3NvcywgY8OzbW8gc29sdWNpb25hciBwcm9ibGVtYXMgZGUgY29uZWN0aXZpZGFkIHkgY8OzbW8gcmVhbGl6YXIgZGlhZ27Ds3N0aWNvcyBkZSAjW2kgaGFyZHdhcmVdLgogICAgICAgICAgICAgIGxpIAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlLmNvbG9yMQogICAgICAgICAgICAgICAgc3BhbiBQcm9ibGVtYXMgZGUgI1tpIHNvZnR3YXJlXTogSW5zdHJ1Y2Npw7NuIHNvYnJlIGPDs21vIHJlc29sdmVyIHByb2JsZW1hcyBjb211bmVzIGRlICNbaSBzb2Z0d2FyZV0sIGluY2x1eWVuZG8gY8OzbW8gcmVpbnN0YWxhciBhcGxpY2FjaW9uZXMsIGPDs21vIHNvbHVjaW9uYXIgcHJvYmxlbWFzIGRlIGNvbXBhdGliaWxpZGFkIHkgY8OzbW8gcmVhbGl6YXIgZGlhZ27Ds3N0aWNvcyBkZSAjW2kgc29mdHdhcmVdLgogICAgICAgICAgICAgIGxpIAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlLmNvbG9yMQogICAgICAgICAgICAgICAgc3BhbiBQcm9ibGVtYXMgZGUgcmVkOiBJbnN0cnVjY2nDs24gc29icmUgY8OzbW8gcmVzb2x2ZXIgcHJvYmxlbWFzIGNvbXVuZXMgZGUgcmVkLCBpbmNsdXllbmRvIGPDs21vIHNvbHVjaW9uYXIgcHJvYmxlbWFzIGRlIGNvbmVjdGl2aWRhZCwgY8OzbW8gY29uZmlndXJhciB5IHV0aWxpemFyIGxhcyBWUE4geSBjw7NtbyByZWFsaXphciBkaWFnbsOzc3RpY29zIGRlIHJlZC4KCgogICAgICAuY29sLWxnLTMubXktbGctMC5teS0zCiAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvdDMvNi5wbmcnIGFsdD0nJykgICAKICAgIFNlcGFyYWRvciAgCiAgICAjdF8zXzMudGl0dWxvLXNlZ3VuZG8uY29sb3ItYWNlbnRvLWNvbnRlbmlkbwogICAgICBoMiAzLjMJQ2FwYWNpdGFjacOzbiBiw6FzaWNhIAogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlci5tYi00CiAgICAgIC5jb2wucHQtbGctMC5wdC1tZC00CiAgICAgICAgcC5tYi0wIExhIGRvY3VtZW50YWNpw7NuIGRlIGVudHJlZ2EgZGUgZXF1aXBvcyBkZSBjw7NtcHV0byBlcyB1biBwcm9jZXNvIHF1ZSBhc2VndXJhIGxhIGNvcnJlY3RhIHRyYW5zbWlzacOzbiBkZSBpbmZvcm1hY2nDs24geSBlc3BlY2lmaWNhY2lvbmVzIGVudHJlIGVsIHByb3ZlZWRvciB5IGVsIHVzdWFyaW8gZmluYWwuIEVzdGEgZG9jdW1lbnRhY2nDs24gaW5jbHV5ZSBkZXRhbGxlcyB0w6ljbmljb3MsIGNvbmZpZ3VyYWNpb25lcyBwcmV2aWFzIGEgbGEgZW50cmVnYSwgaW5zdHJ1Y2Npb25lcyBzb2JyZSBlbCB1c28gZGUgbG9zIGVxdWlwb3MsIHkgbG9zIHBhcsOhbWV0cm9zIGRlIGdhcmFudMOtYS4gTGEgZW50cmVnYSBkZWJlIGluY2x1aXIgdGFudG8gbG9zIGVxdWlwb3MgY29tbyBsb3MgZG9jdW1lbnRvcyBkZSBzb3BvcnRlIHF1ZSBwZXJtaXRhbiBhbCB1c3VhcmlvIGNvbXByZW5kZXIgZWwgZnVuY2lvbmFtaWVudG8gYsOhc2ljbyB5IGxhcyBjb25maWd1cmFjaW9uZXMgcGVyc29uYWxpemFkYXMgZGVsIGRpc3Bvc2l0aXZvLiBFbiBlc3RlIGNvbnRleHRvLCBlcyBpbXBvcnRhbnRlIHF1ZSBzZSBkZXRhbGxlbiBsYXMgY29uZmlndXJhY2lvbmVzIGRlbCBoYXJkd2FyZSB5IHNvZnR3YXJlIHF1ZSBlbCBlcXVpcG8gaW5jbHV5ZSBhbCBtb21lbnRvIGRlIGxhIGVudHJlZ2EuIERlIGlndWFsIG1hbmVyYSwgbGEgZG9jdW1lbnRhY2nDs24gZGViZSBjdWJyaXIgYXNwZWN0b3MgY29tbyBlbCBtYW50ZW5pbWllbnRvIHByZXZlbnRpdm8sIGxhcyBjb25kaWNpb25lcyBkZSBzZXJ2aWNpbyB5IGxhcyBwcnVlYmFzIHJlYWxpemFkYXMgYW50ZXMgZGUgbGEgZW50cmVnYS4KICAgICAgLmNvbC1sZy1hdXRvLnB0LWxnLTAucHQtbWQtNAogICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzL3QzLzcucG5nJyBhbHQ9JycpCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTQKICAgICAgLmNvbC1sZy00Lm15LTIKICAgICAgICAuYmd0MS5wLTQuYnJhZC5oLTEwMC5iZzMKCiAgICAgICAgICBwLm1iLTAgTGEgY2FwYWNpdGFjacOzbiBlbiBjb25maWd1cmFjacOzbiB5IGVudHJlZ2EgZGUgZXF1aXBvcyBkZSBjw7NtcHV0byBhYmFyY2EgdW4gY29uanVudG8gZGUgYWN0aXZpZGFkZXMgb3JpZW50YWRhcyBhIHByZXBhcmFyIGFsIHVzdWFyaW8gcGFyYSBtYW5lamFyIGVsIGVxdWlwbyBjb3JyZWN0YW1lbnRlLiBFc3RvIGludm9sdWNyYSBwcm9jZXNvcyBjb21vIGxhIGluc3RhbGFjacOzbiBkZSBzaXN0ZW1hcyBvcGVyYXRpdm9zLCBhcGxpY2FjaW9uZXMgeSBjb25maWd1cmFjaW9uZXMgcGVyc29uYWxpemFkYXMsIHF1ZSBkZWJlbiByZWFsaXphcnNlIGFudGVzIGRlIGxhIGVudHJlZ2EuIEFkZW3DoXMsIGVzIGltcG9ydGFudGUgcXVlIGxvcyB0w6ljbmljb3MgaW1wYXJ0YW4gZm9ybWFjacOzbiBzb2JyZSBjw7NtbyByZWFsaXphciBwcnVlYmFzIG9wZXJhdGl2YXMgcGFyYSBnYXJhbnRpemFyIHF1ZSBsb3MgZXF1aXBvcyBmdW5jaW9uZW4gY29ycmVjdGFtZW50ZS4gRXN0YXMgcHJ1ZWJhcyBwdWVkZW4gaW5jbHVpciB2ZXJpZmljYWNpb25lcyBkZSBsYSBjb25lY3RpdmlkYWQgZGUgcmVkLCBsYSBjYWxpZGFkIGRlbCBzaXN0ZW1hIGRlIHJlZnJpZ2VyYWNpw7NuLCBlbCByZW5kaW1pZW50byBkZWwgc2lzdGVtYSB5IGxhcyBjb25maWd1cmFjaW9uZXMgZGUgc2VndXJpZGFkLiAKICAgICAgLmNvbC1sZy00Lm15LTIKICAgICAgICAuY29sLWxnLWF1dG8uaC0xMDAKICAgICAgICAgIGltZy5pbWctdC5tYi00KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvdDMvOC5wbmcnIGFsdD0nJykKCiAgICAgIC5jb2wtbGctNC5teS0yCiAgICAgICAgLmJndDEucC00LmJyYWQuaC0xMDAuYmc0CgogICAgICAgICAgcC5tYi0wIEVuIGN1YW50byBhIGxvcyBwcm90b2NvbG9zLCBzZSBkZWJlbiBzZWd1aXIgcGFzb3MgZXN0YWJsZWNpZG9zIHBhcmEgYXNlZ3VyYXIgcXVlIGNhZGEgZXF1aXBvIHNlIGNvbmZpZ3VyZSBkZSBhY3VlcmRvIGNvbiBsYXMgZXNwZWNpZmljYWNpb25lcyB0w6ljbmljYXMgeSBvcGVyYXRpdmFzIHJlcXVlcmlkYXMuIEVzdG8gaW1wbGljYSBzZWd1aXIgcHJvY2VkaW1pZW50b3MgZXN0YW5kYXJpemFkb3MgcGFyYSBsYSBlbnRyZWdhIHkgZ2FyYW50aXphciBxdWUgdG9kb3MgbG9zIGVxdWlwb3MgcGFzZW4gbGFzIHBydWViYXMgbmVjZXNhcmlhcyBhbnRlcyBkZSBsbGVnYXIgYSBtYW5vcyBkZWwgdXN1YXJpbyBmaW5hbC4gQWRlbcOhcywgbGEgY2FwYWNpdGFjacOzbiBkZWJlcsOtYSBhYm9yZGFyIGPDs21vIGludGVycHJldGFyIGxvcyByZXN1bHRhZG9zIGRlIGxhcyBwcnVlYmFzLCBjw7NtbyBwcm9jZWRlciBlbiBjYXNvIGRlIGZhbGxvcyB5IGPDs21vIGdlc3Rpb25hciBwb3NpYmxlcyBpbmNpZGVuY2lhcyBwb3N0LWVudHJlZ2EuCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmJnMS5wLTQuYnJhZAogICAgICAgICAgLmNvbC1sZy1hdXRvLmoxCiAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzL3QzLzkucG5nJyBhbHQ9JycpCiAgICAgICAgICAuY29sLnB0LWxnLTAucHQtbWQtNAogICAgICAgICAgICBwLm1iLTAgQWRpY2lvbmFsbWVudGUgbGFzIHBydWViYXMgZGViZW4gc2VyIGRvY3VtZW50YWRhcyB5IGxvcyByZXN1bHRhZG9zIGRlYmVuIHNlciByZWdpc3RyYWRvcyBwYXJhIGFzZWd1cmFyIHF1ZSBjdWFscXVpZXIgcHJvYmxlbWEgZGV0ZWN0YWRvIHB1ZWRhIHNlciBjb3JyZWdpZG8gYW50ZXMgZGUgbGEgZW50cmVnYS4gTGEgY2FwYWNpdGFjacOzbiB0YW1iacOpbiBkZWJlIGFib3JkYXIgbGEgaW1wb3J0YW5jaWEgZGUgbGEgY29tdW5pY2FjacOzbiBjb24gZWwgdXN1YXJpbyBmaW5hbCwgYXNlZ3VyYW5kbyBxdWUgZWwgZXF1aXBvIHNlYSBlbnRyZWdhZG8gY29uIHRvZGFzIGxhcyBpbnN0cnVjY2lvbmVzIG5lY2VzYXJpYXMgcGFyYSBzdSB1c28geSBtYW50ZW5pbWllbnRvLgogIAoK"},null]}